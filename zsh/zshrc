export LANG=ja_JP.UTF-8
export PATH=~/bin:$PATH

# PROMPT
autoload colors
colors
case ${OSTYPE} in
  darwin*)
    md5command=md5
    ;;
  linux*)
    md5command=md5sum
    ;;
esac
local HOSTCOLOR=$'%{\e[38;5;'"$(printf "%d\n" 0x$(hostname|$md5command|cut -c1-2))"'m%}'
PROMPT="%f$HOSTCOLOR% ${HOST}(%T) %{${fg[yellow]}%}%~%{${reset_color}%}"%1(v|%F{green}%1v%f|)"
[%n]$ "
## display hostname
case "${TERM}" in
  kterm*|xterm)
    precmd() {
      echo -ne "\033]0;${USER}@${HOST}\007"
    }
    ;;
esac


## pushd
setopt autopushd
setopt pushd_ignore_dups

# completion
autoload -U compinit
compinit -u
setopt list_packed

setopt prompt_subst

# history
HISTFILE="$HOME/.zsh_history"
HISTSIZE=100000
SAVEHIST=100000
setopt share_history
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^P" history-beginning-search-backward-end
bindkey "^N" history-beginning-search-forward-end

# peco
function peco-select-history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(history -n 1 | \
        eval $tac | \
        peco --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle clear-screen
}
zle -N peco-select-history
bindkey '^r' peco-select-history

#色の設定
export LSCOLORS=gxfxxxxxcxxxxxxxxxgxgx
export LS_COLORS='di=01;36:ln=01;35:ex=01;32'
zstyle ':completion:*' list-colors 'di=36' 'ln=35' 'ex=32'

# Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

#ctags

#git

# Execute ls and git status when enter key is pressed.
# {{{
function do_enter() {
    if [ -n "$BUFFER" ]; then
        zle accept-line
        return 0
    fi
    echo
    ls
    # ls_abbrev
    if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
        echo
        echo -e "\e[0;33m--- git status ---\e[0m"
        git status -sb
    fi
    zle reset-prompt
    return 0
}
zle -N do_enter
# }}}

# alias
if [ -f /usr/local/bin/brew ]; then
  alias ctags="`brew --prefix`/bin/ctags"
fi

autoload -Uz vcs_info
zstyle ':vcs_info:*' formats '(%s)-[%b]'
zstyle ':vcs_info:*' actionformats '(%s)-[%b|%a]'
precmd () {
    psvar=()
    LANG=en_US.UTF-8 vcs_info
    [[ -n "$vcs_info_msg_0_" ]] && psvar[1]="$vcs_info_msg_0_"
}

#current directory


# alias
alias be='bundle exec'
alias g=git
alias ls="ls -G"
alias rakedb='rake db:migrate && rake db:test:clone'
alias rmorig='rm **/*.orig'
alias sz="source ~/.zshrc"
alias vbrew="vim ~/Dropbox/dotfiles/brewfile"
alias vg='vagrant'
alias vi=vim
alias vimrc="vim ~/.vimrc"
alias zshrc="vim ~/.zshrc"

# Golang
export PATH=$HOME/go/bin:$PATH
export GOPATH=$HOME/go

# Java
if [ -f /usr/libexec/java_home ]; then
  export JAVA_HOME=`/usr/libexec/java_home -v 1.8`
  export M2_HOME="/opt/apache-maven/"
  export MAVEN_OPTS="-Xmx512m"
  export PATH=$PATH:/opt/apache-maven/bin
fi

# Python
if [ -e ~/Library/Python/2.7/bin ]; then
  export PATH=~/Library/Python/2.7/bin:$PATH
  if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi
  if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi
fi
if [ -e ~/Library/Python/3.7/bin ]; then
  export PATH=~/Library/Python/3.7/bin:$PATH
  if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi
  if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi
fi

# Ruby
if [ -e /usr/local/bin/rbenv ]; then
  eval "$(rbenv init -)"
fi

# local
[ -f ./local_zshrc ] && . ./local_zshrc

source aws_zsh_completer.sh
